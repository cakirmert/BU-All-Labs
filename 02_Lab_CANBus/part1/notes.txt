Part 2 â€“ CAN Communication Settings

Test the CAN communication settings with different parameters. The results of these tests include the bitrate, CAN ID, remote request flag, extended frame flag, data length, and data content. The tests are logged with a timestamp.

Deliverables:
- Document the results for five different settings (bitrate, can_id, remote, extended, data_len, data).
- Create a CSV file with the results.

### Test Settings
1. Bitrate: 500000, CAN ID: 0x3FE, Remote: False, Extended: False, Data Length: 8, Data: (1, 2, 3, 4, 5, 6, 7, 8)
2. Bitrate: 250000, CAN ID: 0x1AA, Remote: False, Extended: True, Data Length: 4, Data: (10, 20, 30, 40)
3. Bitrate: 125000, CAN ID: 0x2BB, Remote: True, Extended: False, Data Length: 8, Data: (100, 101, 102, 103, 104, 105, 106, 107)
4. Bitrate: 1000000, CAN ID: 0x4CC, Remote: False, Extended: True, Data Length: 2, Data: (50, 51)
5. Bitrate: 800000, CAN ID: 0x5DD, Remote: True, Extended: False, Data Length: 6, Data: (200, 201, 202, 203, 204, 205)

### Results
The results of these tests are saved in the `can_test_results.csv` file.

### Observations and Understanding

The results for different CAN communication settings show the following insights:

1. **Successful Communication**:
   - Most settings resulted in successful transmission and reception of CAN messages.

2. **Bitrate Handling**:
   - Communication was reliable across a range of bitrates from 125,000 bps to 1,000,000 bps.
   - Specific configurations at 125,000 bps and 800,000 bps resulted in zero data being received.

3. **Data Consistency**:
   - The sent and received data matched for most settings, indicating reliable communication.
   - Discrepancies at certain bitrates suggest potential issues that need further investigation.

### Recommendations

1. **Further Testing**:
   - Conduct additional tests to gather more data and identify any underlying issues.

2. **Hardware Check**:
   - Verify the functioning of CAN transceivers and connectors, especially for configurations with discrepancies.

3. **Software Configuration**:
   - Ensure consistent and correct software settings across the testing setup.

### Python Script Used:

```python
import canalystii
import csv
from datetime import datetime
import time  # Import the time module for delays

# Function to send and receive messages
def test_can_settings(bitrate, can_id, remote, extended, data_len, data):
    # Connect to the Canalyst-II device with specified bitrate
    dev = canalystii.CanalystDevice(bitrate=bitrate)
    
    # Receive all pending messages on channel 1 / clear buffer
    for msg in dev.receive(1):
        print(msg)
    
    # Create a new CAN message with the given parameters
    new_message = canalystii.Message(
        can_id=can_id,
        remote=remote,
        extended=extended,
        data_len=data_len,
        data=data
    )
    
    # Send the message on channel 1
    dev.send(1, new_message)
    print(f"Sent: {new_message}")
    
    # Receive the message on channel 1
    received_message = dev.receive(1)[0]
    print(f"Received: {received_message}")
    
    # Log the results
    results.append({
        "bitrate": bitrate,
        "can_id": can_id,
        "remote": remote,
        "extended": extended,
        "data_len": data_len,
        "data": data,
        "sent_message": str(new_message),
        "received_message": str(received_message),
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    # Stop both channels
    dev.stop(0)
    dev.stop(1)

    # Delete device to free the interface
    del dev

    # Add a short delay to ensure the device is properly released
    time.sleep(1)

# List to store the results
results = []

# Test different settings
test_settings = [
    (500000, 0x3FE, False, False, 8, (1, 2, 3, 4, 5, 6, 7, 8)),
    (250000, 0x1AA, False, True, 4, (10, 20, 30, 40)),
    (125000, 0x2BB, True, False, 8, (100, 101, 102, 103, 104, 105, 106, 107)),
    (1000000, 0x4CC, False, True, 2, (50, 51)),
    (800000, 0x5DD, True, False, 6, (200, 201, 202, 203, 204, 205))
]

for setting in test_settings:
    test_can_settings(*setting)

# Save the results to a CSV file
with open("can_test_results.csv", "w", newline='') as f:
    writer = csv.DictWriter(f, fieldnames=["bitrate", "can_id", "remote", "extended", "data_len", "data", "sent_message", "received_message", "timestamp"])
    writer.writeheader()
    for result in results:
        writer.writerow(result)

print("Test completed and results saved to can_test_results.csv")
